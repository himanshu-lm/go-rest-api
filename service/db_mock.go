// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDb is a mock of Db interface.
type MockDb struct {
	ctrl     *gomock.Controller
	recorder *MockDbMockRecorder
}

// MockDbMockRecorder is the mock recorder for MockDb.
type MockDbMockRecorder struct {
	mock *MockDb
}

// NewMockDb creates a new mock instance.
func NewMockDb(ctrl *gomock.Controller) *MockDb {
	mock := &MockDb{ctrl: ctrl}
	mock.recorder = &MockDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDb) EXPECT() *MockDbMockRecorder {
	return m.recorder
}

// CreateUsers mocks base method.
func (m *MockDb) CreateUsers(emp []Employee, db *sql.DB) (bool, CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUsers", emp, db)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(CustomError)
	return ret0, ret1
}

// CreateUsers indicates an expected call of CreateUsers.
func (mr *MockDbMockRecorder) CreateUsers(emp, db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsers", reflect.TypeOf((*MockDb)(nil).CreateUsers), emp, db)
}

// GetAllEmployees mocks base method.
func (m *MockDb) GetAllEmployees() ([]Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmployees")
	ret0, _ := ret[0].([]Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmployees indicates an expected call of GetAllEmployees.
func (mr *MockDbMockRecorder) GetAllEmployees() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmployees", reflect.TypeOf((*MockDb)(nil).GetAllEmployees))
}

// GetOneWithId mocks base method.
func (m *MockDb) GetOneWithId(id string) (Employee, CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneWithId", id)
	ret0, _ := ret[0].(Employee)
	ret1, _ := ret[1].(CustomError)
	return ret0, ret1
}

// GetOneWithId indicates an expected call of GetOneWithId.
func (mr *MockDbMockRecorder) GetOneWithId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneWithId", reflect.TypeOf((*MockDb)(nil).GetOneWithId), id)
}
